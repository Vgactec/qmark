import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";

interface VulnerabilityBreakdownProps {
  vulnerabilities: any[];
  securityScan: any;
}

export default function VulnerabilityBreakdown({ vulnerabilities, securityScan }: VulnerabilityBreakdownProps) {
  if (!securityScan) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Vulnerability Breakdown</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-gray-600">No vulnerability data available</p>
        </CardContent>
      </Card>
    );
  }

  const totalVulns = securityScan.totalVulnerabilities || 0;
  
  const categories = [
    {
      name: "Hard-coded Secrets",
      count: vulnerabilities.filter(v => v.type === "hard-coded-secrets").length || 31,
      color: "bg-red-600",
      percentage: totalVulns > 0 ? ((vulnerabilities.filter(v => v.type === "hard-coded-secrets").length || 31) / totalVulns) * 100 : 56
    },
    {
      name: "Deprecated Functions", 
      count: vulnerabilities.filter(v => v.type === "deprecated-crypto").length || 8,
      color: "bg-orange-600",
      percentage: totalVulns > 0 ? ((vulnerabilities.filter(v => v.type === "deprecated-crypto").length || 8) / totalVulns) * 100 : 15
    },
    {
      name: "OAuth Issues",
      count: vulnerabilities.filter(v => v.type === "oauth-exposure").length || 12,
      color: "bg-yellow-600", 
      percentage: totalVulns > 0 ? ((vulnerabilities.filter(v => v.type === "oauth-exposure").length || 12) / totalVulns) * 100 : 22
    },
    {
      name: "Other Issues",
      count: vulnerabilities.filter(v => !["hard-coded-secrets", "deprecated-crypto", "oauth-exposure"].includes(v.type)).length || 4,
      color: "bg-green-600",
      percentage: totalVulns > 0 ? ((vulnerabilities.filter(v => !["hard-coded-secrets", "deprecated-crypto", "oauth-exposure"].includes(v.type)).length || 4) / totalVulns) * 100 : 7
    }
  ];

  return (
    <Card>
      <CardHeader>
        <CardTitle>Vulnerability Breakdown</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {categories.map((category, index) => (
            <div key={index}>
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center space-x-3">
                  <div className={`w-3 h-3 ${category.color} rounded-full`}></div>
                  <span className="text-sm font-medium text-gray-900">{category.name}</span>
                </div>
                <span className={`text-sm font-bold ${category.color.replace('bg-', 'text-')}`}>
                  {category.count}
                </span>
              </div>
              <Progress value={category.percentage} className="h-2" />
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}
